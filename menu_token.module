<?php
// $Id$

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function menu_token_form_menu_edit_item_alter(&$form, &$form_state) {
  // Set the weight of Title field to put Path fieldset underneeth.
  $form['menu']['link_title']['#weight'] = -2;

  $form['menu']['path'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#weight' => -1,
  );
  $form['menu']['path']['link_path'] = $form['menu']['link_path'];
  unset($form['menu']['link_path']);
  // Load saved token pathes.
  $menu_token_enabled = variable_get('menu_token_enabled', array());
  // Replace fake path (<front) with user inputed one.
  if (isset($menu_token_enabled[$form['menu']['mlid']['#value']])) {
    $form['menu']['path']['link_path']['#default_value'] = $menu_token_enabled[$form['menu']['mlid']['#value']];
  }

  $form['menu']['path']['token_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use tokens in path.'),
    '#default_value' => isset($menu_token_enabled[$form['menu']['mlid']['#value']]),
  );

  // Token substitutions help.
  $form['menu']['path']['token_help'] = array(
    '#title' => t('Tokens list can be used.'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['menu']['path']['token_help']['help'] = array(
    '#value' => theme('token_help', 'global'),
  );

  // Add custom validation and submit functions.
  array_unshift($form['#validate'], 'menu_token_form_menu_edit_item_validate');

  $form['#submit'][] = 'menu_token_form_menu_edit_item_submit';
}

/**
 * Custom validation for form menu_edit_item.
 */
function menu_token_form_menu_edit_item_validate($form, &$form_state) {
  // If token replacing enabled.
  if ($form_state['values']['menu']['path']['token_enabled']) {
    // Substitute link_path with fake well known '<front>'.
    $form_state['values']['menu']['link_path'] = '<front>';
    // Set 'alter' option to use hook_translated_menu_link().
    $form_state['values']['menu']['options']['alter'] = TRUE;

    $path = $form_state['values']['menu']['path']['link_path'];
    // Check access rights for current author to creat this menu item.
    if ($menu_item = menu_get_item(token_replace($path))) {
      if ($menu_item['access']) {
        return;
      }
    }
    form_set_error('link_path', t("The path '@link_path' is either invalid or you do not have access to it.", array('@link_path' => $path)));
  }
  else {
    $form_state['values']['menu']['link_path'] = $form_state['values']['menu']['path']['link_path'];
  }
}

/**
 * Custom submit function for form menu_edit_form.
 */
function menu_token_form_menu_edit_item_submit($form, &$form_state) {
  if (!$form_state['values']['menu']['path']['token_enabled']) {
    return;
  }

  $menu_token_enabled = variable_get('menu_token_enabled', array());

  $mlid = $form_state['values']['menu']['mlid'];
  $menu_token_enabled[$mlid] = $form_state['values']['menu']['path']['link_path'];
  variable_set('menu_token_enabled', $menu_token_enabled);
}

/**
 * Implementation of hook_translated_menu_link().
 */
function menu_token_translated_menu_link_alter(&$item, $map) {
  $menu_token_enabled = variable_get('menu_token_enabled', array());
  $mlid = $item['mlid'];
  // Check whether we should replace the path.
  if (isset($menu_token_enabled[$mlid])) {
    // Replace with tokens.
    $item['link_path'] = token_replace($menu_token_enabled[$mlid], 'global');
    $item['href'] = $item['link_path'];
    // Load menu_item and check access.
    if ($menu_item = menu_get_item($item['link_path'])) {
      $item['access'] = $menu_item['access'];
      return;
    }

    $item['access'] = FALSE;
  }

}